{"version":3,"sources":["store/actions/index.js","components/Input/index.js","store/actions/todo.js","components/TodoList/TodoListItem/index.js","utils/index.js","components/TodoList/index.js","components/Footer/index.js","components/Main/index.js","store/reducers/todo.js","store/reducers/index.js","store/store.js","components/Application/App.js","serviceWorker.js","index.js"],"names":["connect","store","todos","todo","createTodo","payload","type","ActionTypes","completeAllTodos","props","React","useState","inputState","setInputState","className","onClick","e","onSubmit","preventDefault","length","id","nanoid","content","completed","placeholder","onChange","target","value","editTodo","deleteTodo","changeTodoStatus","todoId","isEditable","setEditableStatus","todoState","setTodoState","inputRef","createRef","onEditFinish","newTodoText","useLayoutEffect","current","focus","editableTodoText","ref","classname","onDoubleClick","onBlur","onKeyPress","key","FILTER_TYPES","ALL","ACTIVE","COMPLETED","FILTER_PREDICATES","el","Object","filter","obj","predicate","keys","reduce","acc","state","filterType","filteredTodos","useMemo","todosForRender","values","map","changeCurrentFilter","clearCompletedTodos","todosCopy","activeTodosCount","filterTypeHandler","name","filterButtons","toLowerCase","capitalize","Main","initialState","JSON","parse","localStorage","getItem","todoReducer","createReducer","action","newTodoContent","omit","currentTodoStatus","some","forEach","omitBy","combineReducers","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","setItem","stringify","getState","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68f3e733.chunk.js","sourcesContent":["export default {\r\n  CREATE_TODO: \"CREATE_TODO\",\r\n  EDIT_TODO: \"EDIT_TODO\",\r\n  DELETE_TODO: \"DELETE_TODO\",\r\n  CHANGE_TODO_STATUS: \"CHANGE_TODO_STATUS\",\r\n  COMPLETE_ALL: \"COMPLETE_ALL\",\r\n  CHANGE_CURRENT_FILTER: \"CHANGE_CURRENT_FILTER\",\r\n  CLEAR_COMPLETED_TODOS: \"CLEAR_COMPLETED_TODOS\",\r\n};\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { createTodo } from \"../../store/actions/todo\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { completeAllTodos } from \"../../store/actions/todo\";\r\n\r\nconst Input = (props) => {\r\n  const [inputState, setInputState] = React.useState(\"\");\r\n  const onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputState.length) {\r\n      props.createTodo({\r\n        id: nanoid(),\r\n        content: inputState,\r\n        completed: false,\r\n      });\r\n      setInputState(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"todo-form\">\r\n      <button\r\n        className=\"todo-form__complete-all\"\r\n        onClick={(e) => {\r\n          props.completeAllTodos();\r\n        }}\r\n      />\r\n      <form className=\"todo-form__form\" onSubmit={onFormSubmit}>\r\n        <input\r\n          className=\"todo-form__input\"\r\n          type=\"text\"\r\n          placeholder=\"What you gonna do?\"\r\n          onChange={(e) => {\r\n            setInputState(e.target.value);\r\n          }}\r\n          value={inputState}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (store) => ({\r\n    todos: store.todo.todos,\r\n  }),\r\n  { createTodo, completeAllTodos }\r\n)(Input);\r\n","import ActionTypes from \"./index\";\r\n\r\nexport const createTodo = (payload) => {\r\n  return { type: ActionTypes.CREATE_TODO, payload };\r\n};\r\n\r\nexport const editTodo = (payload) => {\r\n  return { type: ActionTypes.EDIT_TODO, payload };\r\n};\r\n\r\nexport const deleteTodo = (payload) => {\r\n  return { type: ActionTypes.DELETE_TODO, payload };\r\n};\r\n\r\nexport const changeTodoStatus = (payload) => {\r\n  return { type: ActionTypes.CHANGE_TODO_STATUS, payload };\r\n};\r\n\r\nexport const completeAllTodos = () => {\r\n  return { type: ActionTypes.COMPLETE_ALL };\r\n};\r\n\r\nexport const changeCurrentFilter = (payload) => {\r\n  return { type: ActionTypes.CHANGE_CURRENT_FILTER, payload };\r\n};\r\n\r\nexport const clearCompletedTodos = () => {\r\n  return { type: ActionTypes.CLEAR_COMPLETED_TODOS };\r\n};\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  editTodo,\r\n  deleteTodo,\r\n  changeTodoStatus,\r\n} from \"../../../store/actions/todo\";\r\n\r\nconst TodoListItem = (props) => {\r\n  const todoId = props.todo.id;\r\n  const [isEditable, setEditableStatus] = React.useState(false);\r\n  const [todoState, setTodoState] = React.useState(props.todo.content);\r\n  const inputRef = React.createRef();\r\n\r\n  const onTodoDblClick = () => {\r\n    setEditableStatus(true);\r\n  };\r\n\r\n  const onEditFinish = () => {\r\n    props.editTodo({\r\n      id: todoId,\r\n      newTodoText: todoState,\r\n    });\r\n    setEditableStatus(false);\r\n  };\r\n\r\n  const onEnterPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      onEditFinish();\r\n    }\r\n  };\r\n\r\n  const onCheckboxClick = () => {\r\n    props.changeTodoStatus({ id: todoId });\r\n  };\r\n\r\n  const onDeleteButtonClick = () => {\r\n    props.deleteTodo({\r\n      id: todoId,\r\n    });\r\n  };\r\n\r\n  React.useLayoutEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [inputRef]);\r\n\r\n  const onTodoBlur = () => {\r\n    onEditFinish();\r\n  };\r\n\r\n  const editableTodoText = (\r\n    <input\r\n      value={todoState}\r\n      ref={inputRef}\r\n      onChange={(e) => setTodoState(e.target.value)}\r\n      classname=\"todo__edit\"\r\n    />\r\n  );\r\n  return (\r\n    <div className=\"todo\">\r\n      <i\r\n        className={`todo__checkbox ${\r\n          props.todo.completed && \"todo__checkbox_active\"\r\n        }`}\r\n        onClick={onCheckboxClick}\r\n      ></i>\r\n      <div\r\n        className=\"todo__text\"\r\n        onDoubleClick={onTodoDblClick}\r\n        onBlur={onTodoBlur}\r\n        onKeyPress={onEnterPress}\r\n      >\r\n        {isEditable ? editableTodoText : todoState}\r\n      </div>\r\n      <button className=\"todo__delete-button\" onClick={onDeleteButtonClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { editTodo, deleteTodo, changeTodoStatus })(\r\n  TodoListItem\r\n);\r\n","export const FILTER_TYPES = {\r\n  ALL: \"ALL\",\r\n  ACTIVE: \"ACTIVE\",\r\n  COMPLETED: \"COMPLETED\",\r\n};\r\n\r\nconst FILTER_PREDICATES = {\r\n  [FILTER_TYPES.ALL]: (el) => el,\r\n  [FILTER_TYPES.ACTIVE]: (el) => !el.completed,\r\n  [FILTER_TYPES.COMPLETED]: (el) => el.completed,\r\n};\r\n\r\nObject.filter = (obj, predicate) =>\r\n  Object.keys(obj).reduce((acc, key) => {\r\n    predicate(obj[key]) && (acc[key] = obj[key]);\r\n    return acc;\r\n  }, {});\r\n\r\nexport const filterTodo = (todos, filterType) =>\r\n  Object.filter(todos, FILTER_PREDICATES[filterType]);\r\n\r\nexport const getLocalStorageTodos = () => {\r\n  return JSON.parse(localStorage.getItem(\"storedTodos\"));\r\n};\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport TodoListItem from \"./TodoListItem\";\r\nimport { connect } from \"react-redux\";\r\nimport { filterTodo } from \"../../utils\";\r\n\r\nconst TodoList = (props) => {\r\n  const filteredTodos = React.useMemo(\r\n    () => filterTodo(props.todos, props.filterType),\r\n    [props.todos, props.filterType]\r\n  );\r\n  const todosForRender = React.useMemo(\r\n    () =>\r\n      Object.values(filteredTodos).map((e) => (\r\n        <TodoListItem todo={e} key={e.id} />\r\n      )),\r\n    [filteredTodos]\r\n  );\r\n  return <div>{todosForRender}</div>;\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    todos: state.todo.todos,\r\n    filterType: state.todo.filterType,\r\n  }),\r\n  null\r\n)(TodoList);\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  changeCurrentFilter,\r\n  clearCompletedTodos,\r\n} from \"../../store/actions/todo\";\r\nimport { FILTER_TYPES } from \"../../utils\";\r\nimport capitalize from \"lodash/capitalize\";\r\nconst Footer = (props) => {\r\n  const todosCopy = props.todos;\r\n  const activeTodosCount = React.useMemo(\r\n    () => Object.values(todosCopy).filter((todo) => !todo.completed).length,\r\n    [todosCopy]\r\n  );\r\n  const filterTypeHandler = (e) => {\r\n    props.changeCurrentFilter({ filterType: e.target.name });\r\n  };\r\n  const filterButtons = Object.values(FILTER_TYPES).map((filterType) => (\r\n    <button\r\n      name={filterType}\r\n      onClick={filterTypeHandler}\r\n      className={`filters__${filterType.toLowerCase()} filters__${filterType.toLowerCase()}${\r\n        props.filterType === filterType ? `_active` : \"\"\r\n      }`}\r\n    >\r\n      {capitalize(filterType)}\r\n    </button>\r\n  ));\r\n  return (\r\n    <div className=\"footer\">\r\n      <div className=\"footer__count\">Todos left: {activeTodosCount}</div>\r\n      <div className=\"filters\">\r\n        {filterButtons}\r\n      </div>\r\n      <button className=\"footer__clear\" onClick={props.clearCompletedTodos}>\r\n        Clear completed\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (store) => ({\r\n    todos: store.todo.todos,\r\n    filterType: store.todo.filterType,\r\n  }),\r\n  { changeCurrentFilter, clearCompletedTodos }\r\n)(Footer);\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport Input from \"../Input\";\r\nimport TodoList from \"../TodoList\";\r\nimport Footer from \"../Footer\";\r\n\r\nconst Main = () => {\r\n  return (\r\n    <>\r\n      <div className=\"main-content\">\r\n        <div className=\"todo-block\">\r\n          <div className=\"todo-block__title\">Todos</div>\r\n          <div className=\"todo-block__content\">\r\n            <Input />\r\n            <TodoList />\r\n            <Footer />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import ActionTypes from \"../actions\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport omit from \"lodash/omit\";\r\nimport omitBy from \"lodash/omitBy\";\r\nimport { FILTER_TYPES } from \"../../utils\";\r\nimport { getLocalStorageTodos } from \"../../utils\";\r\n\r\nconst initialState = {\r\n  todos: getLocalStorageTodos() || {},\r\n  filterType: FILTER_TYPES.ALL,\r\n};\r\n\r\nexport const todoReducer = createReducer(initialState, {\r\n  [ActionTypes.CREATE_TODO]: (state, action) => {\r\n    const todo = {\r\n      content: action.payload.content,\r\n      completed: action.payload.completed,\r\n      id: action.payload.id,\r\n    };\r\n    state.todos[action.payload.id] = todo;\r\n  },\r\n\r\n  [ActionTypes.EDIT_TODO]: (state, action) => {\r\n    const newTodoContent = action.payload.newTodoText;\r\n    state.todos[action.payload.id].content = newTodoContent;\r\n  },\r\n\r\n  [ActionTypes.DELETE_TODO]: (state, action) => {\r\n    state.todos = omit(state.todos, action.payload.id);\r\n  },\r\n\r\n  [ActionTypes.CHANGE_TODO_STATUS]: (state, action) => {\r\n    const currentTodoStatus = state.todos[action.payload.id].completed;\r\n    state.todos[action.payload.id].completed = !currentTodoStatus;\r\n  },\r\n\r\n  [ActionTypes.COMPLETE_ALL]: (state, action) => {\r\n    if (Object.values(state.todos).some((e) => !e.completed)) {\r\n      Object.keys(state.todos).forEach((e) => {\r\n        if (!e.completed) {\r\n          state.todos[e].completed = true;\r\n        }\r\n      });\r\n    } else {\r\n      Object.keys(state.todos).forEach((e) => {\r\n        state.todos[e].completed = !state.todos[e].completed;\r\n      });\r\n    }\r\n  },\r\n\r\n  [ActionTypes.CHANGE_CURRENT_FILTER]: (state, action) => {\r\n    state.filterType = action.payload.filterType;\r\n  },\r\n\r\n  [ActionTypes.CLEAR_COMPLETED_TODOS]: (state, action) => {\r\n    state.todos = omitBy(state.todos, (todo) => todo.completed);\r\n  },\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport { todoReducer } from \"../reducers/todo\";\r\nexport default combineReducers({\r\n  todo: todoReducer,\r\n});\r\n","import { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\r\n    \"storedTodos\",\r\n    JSON.stringify(store.getState().todo.todos)\r\n  );\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Main from \"../Main\";\nimport { Provider } from \"react-redux\";\nimport store from \"../../store/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/Application/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}